[
  {
    "objectID": "howto.html",
    "href": "howto.html",
    "title": "Overview",
    "section": "",
    "text": "This section contains how-to’s covered in the UMass HPC Journal Club."
  },
  {
    "objectID": "howtos/git_in_rstudio.html",
    "href": "howtos/git_in_rstudio.html",
    "title": "Connecting a Github repo site with a new RStudio project",
    "section": "",
    "text": "Much of the material for this lesson was borrowed from or inspired by Matt Jones’ NCEAS Reproducible Research Techniques for Synthesis workshop"
  },
  {
    "objectID": "howtos/git_in_rstudio.html#learning-objectives",
    "href": "howtos/git_in_rstudio.html#learning-objectives",
    "title": "Connecting a Github repo site with a new RStudio project",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nIn this lesson, you will learn:\n\nWhat computational reproducibility is and why it is useful\nHow version control can increase computational reproducibility\nHow to start a Github repo and Pages site\nto set up your own RStudio Project and sync with your GitHub repo\nHow to make a simple web page for your site"
  },
  {
    "objectID": "howtos/git_in_rstudio.html#background",
    "href": "howtos/git_in_rstudio.html#background",
    "title": "Connecting a Github repo site with a new RStudio project",
    "section": "Background",
    "text": "Background\n\nReproducible Research\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. While reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that led to scientific results and conclusions.\n\n\nWhat is needed for computational reproducibility?\nThe first step towards addressing these issues is to be able to evaluate the data, analyses, and models on which conclusions are drawn. Under current practice, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed,the code is not available.\nAnd yet, this is easily remedied. Researchers can achieve computational reproducibility through open science approaches, including straightforward steps for archiving data and code openly along with the scientific workflows describing the provenance of scientific results (e.g., @hampton_tao_2015, @munafo_manifesto_2017).\n\n\nConceptualizing workflows\nScientific workflows encapsulate all of the steps from data acquisition, cleaning, transformation, integration, analysis, and visualization.\n\nWorkflows can range in detail from simple flowcharts to fully executable scripts. R scripts and python scripts are a textual form of a workflow, and when researchers publish specific versions of the scripts and data used in an analysis, it becomes far easier to repeat their computations and understand the provenance of their conclusions.\n\n\nThe problem with filenames\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In version control systems like git, the system tracks not just the name of the file, but also its contents, so that when contents change, it can tell you which pieces went where. It tracks which version of a file a new version came from. So its easy to draw a graph showing all of the versions of a file, like this one:\n\nVersion control systems assign an identifier to every version of every file, and track their relationships. They also allow branches in those versions, and merging those branches back into the main line of work. They also support having multiple copies on multiple computers for backup, and for collaboration. And finally, they let you tag particular versions, such that it is easy to return to a set of files exactly as they were when you tagged them. For example, the exact versions of data, code, and narrative that were used when a manuscript was originallysubmitted might be eco-ms-1 in the graph above, and then when it was revised and resubmitted, it was done with tag eco-ms-2. A different paper was started and submitted with tag dens-ms-1, showing that you can be working on multiple manuscripts with closely related but not identical sets of code and data being used for each, and keep track of it all.\n\n\nVersion control and Collaboration using Git and GitHub\nFirst, just what are git and GitHub?\n\ngit: version control software used to track files in a folder (a repository)\n\ngit creates the versioned history of a repository\n\nGitHub: web site that allows users to store their git repositories and share them with others\n\n\n\nThe Git lifecycle\nAs a git user, you’ll need to understand the basic concepts associated with versioned sets of changes, and how they are stored and moved across repositories. Any given git repository can be cloned so that it exist both locally, and remotely. But each of these cloned repositories is simply a copy of all of the files and change history for those files, stored in git’s particular format. For our purposes, we can consider a git repository just a folder with a bunch of additional version-related metadata.\nIn a local git-enabled folder, the folder contains a workspace containing the current version of all files in the repository. These working files are linked to a hidden folder containing the ‘Local repository’, which contains all of the other changes made to the files, along with the version metadata.\nSo, when working with files using git, you can use git commands to indicate specifically which changes to the local working files should be staged for versioning (using the git add command), and when to record those changes as a version in the local repository (using the command git commit).\nThe remaining concepts are involved in synchronizing the changes in your local repository with changes in a remote repository. The git push command is used to send local changes up to a remote repository (possibly on GitHub), and the git pull command is used to fetch changes from a remote repository and merge them into the local repository.\n\n\ngit clone: to copy a whole remote repository to local\ngit add (stage): notify git to track particular changes\ngit commit: store those changes as a version\ngit pull: merge changes from a remote repository to our local repository\ngit push: copy changes from our local repository to a remote repository\ngit status: determine the state of all files in the local repository\ngit log: print the history of changes in a repository\n\nThose seven commands are the majority of what you need to successfully use git. But this is all super abstract, so let’s explore with some real examples."
  },
  {
    "objectID": "howtos/git_in_rstudio.html#on-the-computer",
    "href": "howtos/git_in_rstudio.html#on-the-computer",
    "title": "Connecting a Github repo site with a new RStudio project",
    "section": "On the Computer",
    "text": "On the Computer\n\nOn the github website\n\nRegister for a github account on https://github.com/\nCreate a new repo by clicking on the new repository button.\nGive it a name, make it public, Add a readme file, Add R .gitignore file, Add Apache license.\nEnable a web page for the repo - Click of the settings wheel, in the left menu select pages then under branch select main and save. \nGo back to your main repo page, in the right corner in the About section click the wheel. Select Use your GitHub Pages website. Save changes\nClick on the green code button and copy the https link. \n\n\n\nMake a local version of your github repo in Posit Cloud -\n\nIn Your Workspace (not the EvoGeno Workspace) click on the New Project button then New Project from Git Repository\n\n * Paste in the link to your Github repository (e.g https://github.com/jeffreyblanchard/posit-test.git)\n\nIf your are using RStudio on Unity or your own Computer\n\nIn RStudio click on File > New Project (You can not do this on Posit Cloud. Only on Unity or with RStudio downloaded to your own computer)\nSelect Version Control\nSelect Git\nPaste in link your github site\nChoose the directory you want to use for the project\n\n\n\n\nConfigure your local repo to connect with the github repo\n\nInstall the R package usethis using Tools > Install Packages\nConfigure git with your username and email. This must be the username and email associated with your GitHub account.\n\n\nlibrary(usethis)\nuse_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\n\n * Create a github token\n\nusethis::create_github_token()\n\nThis will open a web page on your github account. The recommended scopes will be pre-selected. This will be fine for now and you can change later if needed.\n\nClick “Generate token”.\nCopy the generated PAT (beginning with ghp)to your clipboard. Provide this PAT next time a Git operation asks for your password.\nTo link your PAT with your repo\n\n\ngitcreds::gitcreds_set() \n\nto get a prompt where you can paste your PAT: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n\nMake an index file as the homepage for your Github repo\n\nIn RStudio open a new Rmarkdown template\nSave it as index.Rmd\nAdd text and images to make your homepage\nKnit it to make index.html\nUnder the git tab in the upper right corner, select commit the changes`\nAdd a description of your changes in the commit messeage\nClick on Commit\nClose the window\nClick on Push to copy the index files to your github repo \nThis will automatically replace your homepage README.md file with index.html (it takes about 5 minutes before the page updates)\nIt will take about 5 minutes before you can see it on your github repo page\nYou can quickly spice up your page by adding a theme to your YAML block of your index.Rmd (available themes are “default”, “bootstrap”, “cerulean”, “cosmo”, “darkly”, “flatly”, “journal”, “lumen”, “paper”, “readable”, “sandstone”, “simplex”, “spacelab”, “united”, “yeti”)\nYou could also try [prettydoc](https://prettydoc.statr.me/0\n\n*** More on git and working with your repos in later labs"
  },
  {
    "objectID": "howtos/neuralnet_in_R.html",
    "href": "howtos/neuralnet_in_R.html",
    "title": "Neuralnetworks in R",
    "section": "",
    "text": "library(neuralnet)\nlibrary(tidyverse)\nlibrary(caret)\n\n\n# Using the built-in iris dataset\ndata(iris)\n\n# Optionally shuffle the dataset\nset.seed(1223)\niris <- iris[sample(nrow(iris)),]\n\n# Split the data into training and testing sets\ntrain_index <- createDataPartition(iris$Species, p = .8, list = FALSE)\ntrain_data <- iris[train_index, ]\ntest_data <- iris[-train_index, ]\n\n\n# Convert Species to a binary outcome for simplification (1 for versicolor, 0 for others)\ntrain_data$Species <- as.numeric(train_data$Species == \"versicolor\")\ntest_data$Species <- as.numeric(test_data$Species == \"versicolor\")\n\n# Define the neural network formula\nnn_formula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width\n\n\ntrain_nn <- function(data) {\n  nn <- neuralnet(nn_formula, data = data, hidden = c(4, 2), linear.output = FALSE, threshold = 0.01)\n  return(nn)\n}\n\n# Train the model\niterations <- 20\n# Train the model and save it to a file after each iteration\nfor (i in 1:iterations) {\n  nn <- train_nn(train_data)\n}\n\n\npredictions_norm <- neuralnet::compute(nn, test_data[, c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\")])\n\n# Assuming binary classification, threshold the predictions\npredictions <- ifelse(predictions_norm$net.result >= 0.5, 1, 0)\n\n# Calculate accuracy\naccuracy <- sum(predictions == test_data$Species) / nrow(test_data)\nprint(paste(\"Accuracy:\", accuracy))\n\n[1] \"Accuracy: 1\"\n\n\n\nplot(nn, rep = \"best\")"
  },
  {
    "objectID": "howtos/quarto_website.html",
    "href": "howtos/quarto_website.html",
    "title": "Creating a Website",
    "section": "",
    "text": "Quarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nQuarto websites can be published to a wide variety of destinations including GitHub Pages, Netlify, Posit Connect, or any other static hosting service or intranet web server. See the documentation on Publishing Websites for additional details."
  },
  {
    "objectID": "howtos/quarto_website.html#quick-start",
    "href": "howtos/quarto_website.html#quick-start",
    "title": "Creating a Website",
    "section": "Quick Start",
    "text": "Quick Start\nFollow the Quick Start for your tool of choice to get a simple website up and running. After covering the basics, read on to learn about website navigation and other more advanced website features.\n\nVS CodeRStudioTerminal\n\n\nTo create a new website project within VS Code, execute the Quarto: Create Project command from the command-palette:\n\nThen, select Website Project:\n\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project:\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website:\n\nThe preview will show to the right of the source file. As you re-render index.qmd or render other files like about.qmd, the preview is automatically updated.\n\n\nTo create a new website project within RStudio, use the New Project command and select Quarto Website:\n\n\n\n\n\n\n\n\n\n\nThen, provide a directory name and other relevant options for the website:\n\nClick the Render button to preview the website:\n\nThe preview will show to the right of the source file. As you re-render index.qmd or render other files like about.qmd, the preview is automatically updated.\n\n\nTo create a new website project from the Terminal, use the quarto create project command, following the prompt to select the type and to provide a name for the project (will be used as the directory name):\n\n\nTerminal\n\nquarto create project website mysite\n\nThis will create the scaffolding for a simple website in the mysite sub-directory. Use the quarto preview command to render and preview the website:\n\n\nTerminal\n\nquarto preview mysite\n\nThe website preview will open in a new web browser. As you edit and save index.qmd (or other files like about.qmd) the preview is automatically updated."
  },
  {
    "objectID": "howtos/quarto_website.html#workflow",
    "href": "howtos/quarto_website.html#workflow",
    "title": "Creating a Website",
    "section": "Workflow",
    "text": "Workflow\nAbove we have demonstrated how to create and edit a simple website. In this section we go into more depth on website workflow.\n\nConfig File\nEvery website has a _quarto.yml config file that provides website options as well as defaults for HTML documents created within the site. For example, here is the default config file for the simple site created above:\n\n\n_quarto.yml\n\nproject:\n  type: website\n\nwebsite:\n  title: \"today\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nSee the documentation on Website Navigation and Website Tools for additional details on website configuration. See HTML Documents for details on customizing HTML format options.\n\n\nWebsite Preview\nIf you are using VS Code or RStudio, the Render button automatically renders and runs quarto preview in an embedded window. You can also do the same thing from the Terminal if need be:\n\n\nTerminal\n\n# preview the website in the current directory\nquarto preview\n\nNote that when you preview a site (either using VS Code / RStudio integrated tools or from the terminal) changes to configuration files (e.g. _quarto.yml) as well as site resources (e.g. theme or CSS files) will cause an automatic refresh of the preview.\nYou can customize the behavior of the preview server (port, whether it opens a browser, etc.) using command line options or the _quarto.yml config file. See quarto preview help or the project file reference for additional details.\n\n\n\n\n\n\nImportant\n\n\n\nAs you preview your site, pages will be rendered and updated. However, if you make changes to global options (e.g. _quarto.yml or included files) you need to fully re-render your site to have all of the changes reflected. Consequently, you should always fully quarto render your site before deploying it, even if you have already previewed changes to some pages with the preview server.\n\n\n\n\nWebsite Render\nTo render (but not preview) a website, use the quarto render command, which will render the website into the _site directory by default:\n\n\nTerminal\n\n# render the website in the current directory\nquarto render \n\nSee the Project Basics article to learn more about working with projects, including specifying an explicit list of files to render, as well as adding custom pre and post render scripts to your project."
  },
  {
    "objectID": "howtos/quarto_website.html#linking",
    "href": "howtos/quarto_website.html#linking",
    "title": "Creating a Website",
    "section": "Linking",
    "text": "Linking\nWhen creating links between pages in your site, you can provide the source file as the link target (rather than the .html file). You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nOne benefit of using this style of link as opposed to targeting .html files directly is that if you at some point convert your site to a book the file-based links will automatically resolve to section links for formats that produce a single file (e.g. PDF or MS Word)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hpc-jc-website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "presentations/presentations_example.html#hello-there",
    "href": "presentations/presentations_example.html#hello-there",
    "title": "Presentation Example",
    "section": "Hello, There",
    "text": "Hello, There\nThis presentation will show you examples of what you can do with Quarto and Reveal.js, including:\n\nPresenting code and LaTeX equations\nIncluding computations in slide output\nImage, video, and iframe backgrounds\nFancy transitions and animations\nPrinting to PDF\n\n…and much more"
  },
  {
    "objectID": "presentations/presentations_example.html#pretty-code",
    "href": "presentations/presentations_example.html#pretty-code",
    "title": "Presentation Example",
    "section": "Pretty Code",
    "text": "Pretty Code\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n  })\n}\n\nLearn more: Syntax Highlighting"
  },
  {
    "objectID": "presentations/presentations_example.html#code-animations",
    "href": "presentations/presentations_example.html#code-animations",
    "title": "Presentation Example",
    "section": "Code Animations",
    "text": "Code Animations\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n    barplot(WorldPhones[,input$region]*1000, \n            main=input$region,\n            ylab=\"Number of Telephones\",\n            xlab=\"Year\")\n  })\n}\n\nLearn more: Code Animations"
  },
  {
    "objectID": "presentations/presentations_example.html#line-highlighting",
    "href": "presentations/presentations_example.html#line-highlighting",
    "title": "Presentation Example",
    "section": "Line Highlighting",
    "text": "Line Highlighting\n\nHighlight specific lines for emphasis\nIncrementally highlight additional lines\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\nLearn more: Line Highlighting"
  },
  {
    "objectID": "presentations/presentations_example.html#executable-code",
    "href": "presentations/presentations_example.html#executable-code",
    "title": "Presentation Example",
    "section": "Executable Code",
    "text": "Executable Code\n\nlibrary(ggplot2)\nggplot(mtcars, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\")\n\n\n\nLearn more: Executable Code"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Overview",
    "section": "",
    "text": "This section contains presentations covered in the UMass HPC Journal Club."
  }
]